go run concurrency/con.go

// result
goroutine sender  a
start recive
recive  a
goroutine sender  b
start recive
recive  b
goroutine sender  c
start recive
recive  c

stard @main
make unbufferedChannel
fork goroutine to child
wait 1 s @main
@child work
send data to channel
@child goroutine is block until channel receive
@main start receive
@child goroutine continue
end @main

Channels
FIFO

select statement
The select statement lets a goroutine wait on multiple communication operations.
A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.

## 3 concurrency patterns
-- for-select loop
-- done channel
-- pipelines

make channel without specific capacity  is unbuffered channel,that synchronize goroutine sender and receiver